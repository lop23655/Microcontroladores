
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00000a40  00000ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  008001bc  008001bc  00000b90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d07  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  000019af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000662  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000027e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000236  00000000  00000000  00002e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_18>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_21>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	d3 01       	movw	r26, r6
  6a:	ee 00       	.word	0x00ee	; ????
  6c:	ee 00       	.word	0x00ee	; ????
  6e:	ee 00       	.word	0x00ee	; ????
  70:	ee 00       	.word	0x00ee	; ????
  72:	ee 00       	.word	0x00ee	; ????
  74:	ee 00       	.word	0x00ee	; ????
  76:	ee 00       	.word	0x00ee	; ????
  78:	02 01       	movw	r0, r4
  7a:	18 02       	muls	r17, r24
  7c:	ee 00       	.word	0x00ee	; ????
  7e:	ec 01       	movw	r28, r24
  80:	ee 00       	.word	0x00ee	; ????
  82:	ee 00       	.word	0x00ee	; ????
  84:	47 01       	movw	r8, r14
  86:	47 01       	movw	r8, r14
  88:	47 01       	movw	r8, r14
  8a:	ee 00       	.word	0x00ee	; ????
  8c:	47 01       	movw	r8, r14

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e0 e4       	ldi	r30, 0x40	; 64
  a2:	fa e0       	ldi	r31, 0x0A	; 10
  a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	ac 3b       	cpi	r26, 0xBC	; 188
  ac:	b1 07       	cpc	r27, r17
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	ac eb       	ldi	r26, 0xBC	; 188
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
  b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
  ba:	a3 3d       	cpi	r26, 0xD3	; 211
  bc:	b2 07       	cpc	r27, r18
  be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
  c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  c4:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <initServoTimer1>:
#include "PWM.h"

void initServoTimer1()
{
	// PB1 (OC1A) como salida
	DDRB |= (1 << DDB1);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	84 b9       	out	0x04, r24	; 4

	// Modo 14: Fast PWM con ICR1 como TOP
	TCCR1A = (1 << WGM11); // WGM11 = 1
  d2:	a0 e8       	ldi	r26, 0x80	; 128
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8c 93       	st	X, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // WGM13 y WGM12 = 1
  da:	e1 e8       	ldi	r30, 0x81	; 129
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 83       	st	Z, r24

	// No invertido en OC1A: COM1A1 = 1, COM1A0 = 0
	TCCR1A |= (1 << COM1A1) ;
  e2:	8c 91       	ld	r24, X
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8c 93       	st	X, r24

	// Establecer TOP en ICR1 para 20 ms (50 Hz)
	// f = 16 MHz / 8 = 2 MHz, 20 ms = 40000 ticks
	ICR1 = 39999;
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9c e9       	ldi	r25, 0x9C	; 156
  ec:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  f0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	// Prescaler = 8
	TCCR1B |= (1 << CS11);
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <updateServoPulse>:
}

void updateServoPulse(uint16_t pulso)
{
	// pulse_width entre 1000 (1ms) y 2000 (2ms)
	OCR1A = pulso;
  fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 100:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 104:	08 95       	ret

00000106 <initServoTimer12>:
}

void initServoTimer12()
{
	// PB2 (OC1B) como salida
	DDRB |= (1 << DDB2);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << COM1B1);
 10c:	e0 e8       	ldi	r30, 0x80	; 128
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 62       	ori	r24, 0x20	; 32
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <updateServoPulse2>:
}

void updateServoPulse2(uint16_t pulso2)
{
	// pulse_width entre 1000 (1ms) y 2000 (2ms)
	OCR1B = pulso2;
 118:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 11c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 120:	08 95       	ret

00000122 <initServoTimer2>:
}

void initServoTimer2()
{
	// PB3 (OC2A) y PD3 (OC2B) como salidas
	DDRB |= (1<<DDB3);
 122:	84 b1       	in	r24, 0x04	; 4
 124:	88 60       	ori	r24, 0x08	; 8
 126:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD3);
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	8a b9       	out	0x0a, r24	; 10

	// Fast PWM 8-bit, no invertido en OC2A/OC2B
	TCCR2A = (1<<WGM20)|(1<<WGM21)
 12e:	83 ea       	ldi	r24, 0xA3	; 163
 130:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	| (1<<COM2A1)|(1<<COM2B1);
	// prescaler = 1024 ? 61 Hz frame, tick = 64 µs
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 13a:	08 95       	ret

0000013c <updateServoPulse3>:
}

// Escala y carga OCR2A (servo3)
void updateServoPulse3(uint16_t pulso)
{
	OCR2A = pulso;
 13c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 140:	08 95       	ret

00000142 <updateServoPulse4>:
}

// Escala y carga OCR2B (servo4)
void updateServoPulse4(uint16_t pulso)
{
	OCR2B = pulso;
 142:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 146:	08 95       	ret

00000148 <initUART>:
    sei();
}

void initUART(void) {
    // PD1 TX, PD0 RX
    DDRD |=  (1<<DDD1);
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1<<DDD0);
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	8e 7f       	andi	r24, 0xFE	; 254
 152:	8a b9       	out	0x0a, r24	; 10
    UCSR0A = 0;
 154:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UBRR0  = 103; // 9600 bps @16MHz
 164:	87 e6       	ldi	r24, 0x67	; 103
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 16c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 170:	08 95       	ret

00000172 <writeChar>:
}

void writeChar(char c) {
    while (!(UCSR0A & (1<<UDRE0)));
 172:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 176:	95 ff       	sbrs	r25, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <writeChar>
    UDR0 = c;
 17a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17e:	08 95       	ret

00000180 <writeString>:
}

void writeString(const char *s) {
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
    while (*s) writeChar(*s++);//Sigue escribiendo hasta que se termine la señal mandada
 186:	03 c0       	rjmp	.+6      	; 0x18e <writeString+0xe>
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	0e 94 b9 00 	call	0x172	; 0x172 <writeChar>
 18e:	88 81       	ld	r24, Y
 190:	81 11       	cpse	r24, r1
 192:	fa cf       	rjmp	.-12     	; 0x188 <writeString+0x8>
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <initADC>:

void initADC(void) {
    // AVcc ref, ajuste izquierdo, canal0
    ADMUX  = (1<<REFS0)|(1<<ADLAR);
 19a:	80 e6       	ldi	r24, 0x60	; 96
 19c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    // habilita ADC + ISR + prescaler128
    ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1a0:	ea e7       	ldi	r30, 0x7A	; 122
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	8f e8       	ldi	r24, 0x8F	; 143
 1a6:	80 83       	st	Z, r24
    // arranca free-running
    ADCSRA |= (1<<ADSC);
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <setup>:

    }
}

void setup(void) {
    cli();
 1b0:	f8 94       	cli
    // LEDs en PD4 y PD5
    DDRD |= (1<<DDD4)|(1<<DDD5);
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	80 63       	ori	r24, 0x30	; 48
 1b6:	8a b9       	out	0x0a, r24	; 10
    initUART();
 1b8:	0e 94 a4 00 	call	0x148	; 0x148 <initUART>
    initADC();
 1bc:	0e 94 cd 00 	call	0x19a	; 0x19a <initADC>
    initServoTimer1();
 1c0:	0e 94 66 00 	call	0xcc	; 0xcc <initServoTimer1>
    initServoTimer12();
 1c4:	0e 94 83 00 	call	0x106	; 0x106 <initServoTimer12>
    initServoTimer2();
 1c8:	0e 94 91 00 	call	0x122	; 0x122 <initServoTimer2>
    sei();
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <main>:
void writeChar(char c);
void writeString(const char *s);
void initADC(void);

int main(void) {
    setup();
 1d0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <setup>
    writeString("\r\nSeleccione modo:\r\n1.Manual 2.EEPROM 3.Adafruit\r\n");
 1d4:	8d e1       	ldi	r24, 0x1D	; 29
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>

    while (1) {
        if (cmd_ready) {//Espera a una señal para de la UART para comenzar
 1dc:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <cmd_ready>
 1e0:	88 23       	and	r24, r24
 1e2:	e1 f3       	breq	.-8      	; 0x1dc <main+0xc>
            cmd_ready = 0;
 1e4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <cmd_ready>
            switch (rx_buf[0]) {
 1e8:	c0 91 c3 01 	lds	r28, 0x01C3	; 0x8001c3 <rx_buf>
 1ec:	8c 2f       	mov	r24, r28
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	e5 54       	subi	r30, 0x45	; 69
 1f4:	f1 09       	sbc	r31, r1
 1f6:	e3 31       	cpi	r30, 0x13	; 19
 1f8:	f1 05       	cpc	r31, r1
 1fa:	80 f7       	brcc	.-32     	; 0x1dc <main+0xc>
 1fc:	ec 5c       	subi	r30, 0xCC	; 204
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__tablejump2__>
                // CAMBIAR MODO PRINCIPAL
                case 'M': {//Case viene de python es la señal que esta conectada a su respectivo receiver, en este caso Modo_tx
                    uint8_t m = atoi(&rx_buf[1]);
 204:	84 ec       	ldi	r24, 0xC4	; 196
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <atoi>
                    if (m >= MODE_MANUAL && m <= MODE_EEPROM) {
 20c:	9f ef       	ldi	r25, 0xFF	; 255
 20e:	98 0f       	add	r25, r24
 210:	93 30       	cpi	r25, 0x03	; 3
 212:	20 f7       	brcc	.-56     	; 0x1dc <main+0xc>
                        mode = m;
 214:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mode>
                        writeString("\r\nModo cambiado: ");
 218:	80 e5       	ldi	r24, 0x50	; 80
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
                        if (mode == MODE_MANUAL) {
 220:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	81 f4       	brne	.+32     	; 0x248 <main+0x78>
                            writeString("Manual\r\n");
 228:	82 e6       	ldi	r24, 0x62	; 98
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
                            PORTD |=  (1<<PORTD4);//Enciende las leds que indican el modo
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	80 61       	ori	r24, 0x10	; 16
 234:	8b b9       	out	0x0b, r24	; 11
                            PORTD &= ~(1<<PORTD5);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	8f 7d       	andi	r24, 0xDF	; 223
 23a:	8b b9       	out	0x0b, r24	; 11
                            // Arrancar ADC free-running
                            ADCSRA |= (1<<ADEN)|(1<<ADSC);//Activa interrupcion manual en modo EEPROM
 23c:	ea e7       	ldi	r30, 0x7A	; 122
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 6c       	ori	r24, 0xC0	; 192
 244:	80 83       	st	Z, r24
 246:	1e c0       	rjmp	.+60     	; 0x284 <main+0xb4>
                        }
                        else if (mode == MODE_EEPROM) {
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	69 f4       	brne	.+26     	; 0x266 <main+0x96>
                            writeString("EEPROM\r\n");
 24c:	8b e6       	ldi	r24, 0x6B	; 107
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
                            PORTD |=  (1<<PORTD4)|(1<<PORTD5);
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	80 63       	ori	r24, 0x30	; 48
 258:	8b b9       	out	0x0b, r24	; 11
                            // Parar ADC
                            ADCSRA &= ~(1<<ADEN);
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8f 77       	andi	r24, 0x7F	; 127
 262:	80 83       	st	Z, r24
 264:	0f c0       	rjmp	.+30     	; 0x284 <main+0xb4>
                        }
                        else { // MODE_ADAFRUIT
                            writeString("Adafruit\r\n");
 266:	85 e4       	ldi	r24, 0x45	; 69
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
                            PORTD |=  (1<<PORTD5);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	80 62       	ori	r24, 0x20	; 32
 272:	8b b9       	out	0x0b, r24	; 11
                            PORTD &= ~(1<<PORTD4);
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	8f 7e       	andi	r24, 0xEF	; 239
 278:	8b b9       	out	0x0b, r24	; 11
                            ADCSRA &= ~(1<<ADEN);// Desactiva las interrupcion para poder mandar señales con ADAFRUIT
 27a:	ea e7       	ldi	r30, 0x7A	; 122
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	8f 77       	andi	r24, 0x7F	; 127
 282:	80 83       	st	Z, r24
                        }
                        writeString("1.Manual 2.EEPROM 3.Adafruit\r\n");
 284:	81 e3       	ldi	r24, 0x31	; 49
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
 28c:	a7 cf       	rjmp	.-178    	; 0x1dc <main+0xc>
                    break;
                }

                // MODO ADAFRUIT: control servos por UART
                case 'S': case 'T': case 'U': case 'W': {
                    if (mode == MODE_ADAFRUIT) {
 28e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	09 f0       	breq	.+2      	; 0x298 <main+0xc8>
 296:	a2 cf       	rjmp	.-188    	; 0x1dc <main+0xc>
                        uint16_t p = atoi(&rx_buf[1]);
 298:	84 ec       	ldi	r24, 0xC4	; 196
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <atoi>
 2a0:	8c 01       	movw	r16, r24
                        if (rx_buf[0]=='S') updateServoPulse ((p*3850UL)/255+1200);
 2a2:	c3 35       	cpi	r28, 0x53	; 83
 2a4:	81 f4       	brne	.+32     	; 0x2c6 <main+0xf6>
 2a6:	9c 01       	movw	r18, r24
 2a8:	aa e0       	ldi	r26, 0x0A	; 10
 2aa:	bf e0       	ldi	r27, 0x0F	; 15
 2ac:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__umulhisi3>
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 2bc:	c9 01       	movw	r24, r18
 2be:	80 55       	subi	r24, 0x50	; 80
 2c0:	9b 4f       	sbci	r25, 0xFB	; 251
 2c2:	0e 94 7e 00 	call	0xfc	; 0xfc <updateServoPulse>
                        if (rx_buf[0]=='T') updateServoPulse2((p*3850UL)/255+1200);
 2c6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <rx_buf>
 2ca:	84 35       	cpi	r24, 0x54	; 84
 2cc:	81 f4       	brne	.+32     	; 0x2ee <main+0x11e>
 2ce:	98 01       	movw	r18, r16
 2d0:	aa e0       	ldi	r26, 0x0A	; 10
 2d2:	bf e0       	ldi	r27, 0x0F	; 15
 2d4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__umulhisi3>
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 2e4:	c9 01       	movw	r24, r18
 2e6:	80 55       	subi	r24, 0x50	; 80
 2e8:	9b 4f       	sbci	r25, 0xFB	; 251
 2ea:	0e 94 8c 00 	call	0x118	; 0x118 <updateServoPulse2>
                        if (rx_buf[0]=='U') updateServoPulse3((p*   15UL)/255+   16);
 2ee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <rx_buf>
 2f2:	85 35       	cpi	r24, 0x55	; 85
 2f4:	49 f5       	brne	.+82     	; 0x348 <main+0x178>
 2f6:	c8 01       	movw	r24, r16
 2f8:	a0 e0       	ldi	r26, 0x00	; 0
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	ac 01       	movw	r20, r24
 2fe:	bd 01       	movw	r22, r26
 300:	44 0f       	add	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	66 1f       	adc	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	84 0f       	add	r24, r20
 30a:	95 1f       	adc	r25, r21
 30c:	a6 1f       	adc	r26, r22
 30e:	b7 1f       	adc	r27, r23
 310:	ac 01       	movw	r20, r24
 312:	bd 01       	movw	r22, r26
 314:	44 0f       	add	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	66 1f       	adc	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	44 0f       	add	r20, r20
 31e:	55 1f       	adc	r21, r21
 320:	66 1f       	adc	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	6c 01       	movw	r12, r24
 326:	7d 01       	movw	r14, r26
 328:	c4 0e       	add	r12, r20
 32a:	d5 1e       	adc	r13, r21
 32c:	e6 1e       	adc	r14, r22
 32e:	f7 1e       	adc	r15, r23
 330:	c7 01       	movw	r24, r14
 332:	b6 01       	movw	r22, r12
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 340:	c9 01       	movw	r24, r18
 342:	40 96       	adiw	r24, 0x10	; 16
 344:	0e 94 9e 00 	call	0x13c	; 0x13c <updateServoPulse3>
                        if (rx_buf[0]=='W') updateServoPulse4((p*   15UL)/255+   16);
 348:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <rx_buf>
 34c:	87 35       	cpi	r24, 0x57	; 87
 34e:	09 f0       	breq	.+2      	; 0x352 <main+0x182>
 350:	45 cf       	rjmp	.-374    	; 0x1dc <main+0xc>
 352:	c8 01       	movw	r24, r16
 354:	a0 e0       	ldi	r26, 0x00	; 0
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	ac 01       	movw	r20, r24
 35a:	bd 01       	movw	r22, r26
 35c:	44 0f       	add	r20, r20
 35e:	55 1f       	adc	r21, r21
 360:	66 1f       	adc	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	84 0f       	add	r24, r20
 366:	95 1f       	adc	r25, r21
 368:	a6 1f       	adc	r26, r22
 36a:	b7 1f       	adc	r27, r23
 36c:	ac 01       	movw	r20, r24
 36e:	bd 01       	movw	r22, r26
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	66 1f       	adc	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	44 0f       	add	r20, r20
 37a:	55 1f       	adc	r21, r21
 37c:	66 1f       	adc	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	7c 01       	movw	r14, r24
 382:	8d 01       	movw	r16, r26
 384:	e4 0e       	add	r14, r20
 386:	f5 1e       	adc	r15, r21
 388:	06 1f       	adc	r16, r22
 38a:	17 1f       	adc	r17, r23
 38c:	c8 01       	movw	r24, r16
 38e:	b7 01       	movw	r22, r14
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 39c:	c9 01       	movw	r24, r18
 39e:	40 96       	adiw	r24, 0x10	; 16
 3a0:	0e 94 a1 00 	call	0x142	; 0x142 <updateServoPulse4>
 3a4:	1b cf       	rjmp	.-458    	; 0x1dc <main+0xc>
                    break;
                }

                // MODO EEPROM: elegir submodo write/read
                case 'E': {
                    if (mode == MODE_EEPROM) {
 3a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <main+0x1e0>
 3ae:	16 cf       	rjmp	.-468    	; 0x1dc <main+0xc>
                        mode2 = atoi(&rx_buf[1]);
 3b0:	84 ec       	ldi	r24, 0xC4	; 196
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <atoi>
 3b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                        writeString(mode2==MODE_WRITE?"Write block\r\n":"Read block\r\n");
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	19 f4       	brne	.+6      	; 0x3c6 <main+0x1f6>
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <main+0x1fa>
 3c6:	80 e1       	ldi	r24, 0x10	; 16
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
                        writeString("1.Write 2.Read\r\n");
 3ce:	84 e7       	ldi	r24, 0x74	; 116
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
 3d6:	02 cf       	rjmp	.-508    	; 0x1dc <main+0xc>
                    break;
                }

                // MODO EEPROM: seleccionar bloque 14
                case 'P': {
                    if (mode == MODE_EEPROM) {
 3d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 3dc:	83 30       	cpi	r24, 0x03	; 3
 3de:	09 f0       	breq	.+2      	; 0x3e2 <main+0x212>
 3e0:	fd ce       	rjmp	.-518    	; 0x1dc <main+0xc>
                        posicion = atoi(&rx_buf[1]);
 3e2:	84 ec       	ldi	r24, 0xC4	; 196
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <atoi>
 3ea:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <posicion>
                        if (posicion>=1 && posicion<=4) {
 3ee:	9f ef       	ldi	r25, 0xFF	; 255
 3f0:	98 0f       	add	r25, r24
 3f2:	94 30       	cpi	r25, 0x04	; 4
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <main+0x228>
 3f6:	f2 ce       	rjmp	.-540    	; 0x1dc <main+0xc>
                            eeprom_addr = (posicion-1)*4;
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <eeprom_addr+0x1>
 408:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <eeprom_addr>
                            writeString("Bloque ");
 40c:	85 e8       	ldi	r24, 0x85	; 133
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
                            writeChar('0'+posicion);
 414:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <posicion>
 418:	80 5d       	subi	r24, 0xD0	; 208
 41a:	0e 94 b9 00 	call	0x172	; 0x172 <writeChar>
                            writeString(" seleccionado\r\n");
 41e:	8d e8       	ldi	r24, 0x8D	; 141
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
                            writeString("Use N0/N1 para stay\r\n");
 426:	8d e9       	ldi	r24, 0x9D	; 157
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
 42e:	d6 ce       	rjmp	.-596    	; 0x1dc <main+0xc>
                    break;
                }

                // NUEVO: N<payload> fija eeprom_stay (0=no grabar,1=grabar)
                case 'N': {
                    if (mode == MODE_EEPROM) {
 430:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 434:	83 30       	cpi	r24, 0x03	; 3
 436:	09 f0       	breq	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	d1 ce       	rjmp	.-606    	; 0x1dc <main+0xc>
                        eeprom_stay = (atoi(&rx_buf[1]) != 0);
 43a:	84 ec       	ldi	r24, 0xC4	; 196
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <atoi>
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	89 2b       	or	r24, r25
 446:	09 f4       	brne	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <__data_end>
                        writeString("Stay = ");
 44e:	83 eb       	ldi	r24, 0xB3	; 179
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
                        writeChar(eeprom_stay?'1':'0');
 456:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
 45a:	88 23       	and	r24, r24
 45c:	11 f0       	breq	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	81 e3       	ldi	r24, 0x31	; 49
 460:	01 c0       	rjmp	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 462:	80 e3       	ldi	r24, 0x30	; 48
 464:	0e 94 b9 00 	call	0x172	; 0x172 <writeChar>
                        writeString("\r\n");
 468:	81 e7       	ldi	r24, 0x71	; 113
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 c0 00 	call	0x180	; 0x180 <writeString>
 470:	b5 ce       	rjmp	.-662    	; 0x1dc <main+0xc>

00000472 <__vector_18>:
    ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    // arranca free-running
    ADCSRA |= (1<<ADSC);
}

ISR(USART_RX_vect) {
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	char c = UDR0;                // Leer el carácter que acaba de llegar al registro de datos de la UART
 484:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	// Comprobar si es fin de línea (\n) o si hemos llenado el buffer menos uno
	if (c == '\n' || rx_idx >= RX_BUF_SIZE - 1) {
 488:	8a 30       	cpi	r24, 0x0A	; 10
 48a:	21 f0       	breq	.+8      	; 0x494 <__vector_18+0x22>
 48c:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <rx_idx>
 490:	9f 30       	cpi	r25, 0x0F	; 15
 492:	60 f0       	brcs	.+24     	; 0x4ac <__vector_18+0x3a>
		rx_buf[rx_idx] = '\0';    // Añadir terminador nulo para convertir rx_buf en cadena C válida
 494:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <rx_idx>
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	ed 53       	subi	r30, 0x3D	; 61
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	10 82       	st	Z, r1
		rx_idx = 0;               // Reiniciar el índice para la próxima señal
 4a0:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <rx_idx>
		cmd_ready = 1;            // Señalar al main() que hay un comando completo listo para procesar
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <cmd_ready>
 4aa:	0a c0       	rjmp	.+20     	; 0x4c0 <__vector_18+0x4e>
		} else {
		rx_buf[rx_idx++] = c;     // Almacenar el carácter en el buffer y avanzar el índice
 4ac:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <rx_idx>
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	9e 0f       	add	r25, r30
 4b4:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <rx_idx>
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	ed 53       	subi	r30, 0x3D	; 61
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	80 83       	st	Z, r24
	}
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <__vector_21>:

ISR(ADC_vect) {
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
    uint8_t v = ADCH;
 4f8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    // Solo si ADC habilitado (modo manual)
    if (ADCSRA & (1<<ADEN)) {
 4fc:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 500:	99 23       	and	r25, r25
 502:	0c f0       	brlt	.+2      	; 0x506 <__vector_21+0x34>
 504:	8f c0       	rjmp	.+286    	; 0x624 <__vector_21+0x152>
        switch (canal_actual) {
 506:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <canal_actual>
 50a:	91 30       	cpi	r25, 0x01	; 1
 50c:	f9 f0       	breq	.+62     	; 0x54c <__vector_21+0x7a>
 50e:	18 f0       	brcs	.+6      	; 0x516 <__vector_21+0x44>
 510:	92 30       	cpi	r25, 0x02	; 2
 512:	b9 f1       	breq	.+110    	; 0x582 <__vector_21+0xb0>
 514:	69 c0       	rjmp	.+210    	; 0x5e8 <__vector_21+0x116>
            case 0:
                updateServoPulse ((v*3600UL)/255 +1200);
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	a0 e1       	ldi	r26, 0x10	; 16
 51c:	be e0       	ldi	r27, 0x0E	; 14
 51e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__umulhisi3>
 522:	2f ef       	ldi	r18, 0xFF	; 255
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 52e:	c9 01       	movw	r24, r18
 530:	80 55       	subi	r24, 0x50	; 80
 532:	9b 4f       	sbci	r25, 0xFB	; 251
 534:	0e 94 7e 00 	call	0xfc	; 0xfc <updateServoPulse>
                ADMUX = (ADMUX&0xF0)|1; canal_actual=1;
 538:	ec e7       	ldi	r30, 0x7C	; 124
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	80 7f       	andi	r24, 0xF0	; 240
 540:	81 60       	ori	r24, 0x01	; 1
 542:	80 83       	st	Z, r24
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <canal_actual>
                break;
 54a:	6c c0       	rjmp	.+216    	; 0x624 <__vector_21+0x152>
            case 1:
                updateServoPulse2((v*3600UL)/255 +1200);
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	a0 e1       	ldi	r26, 0x10	; 16
 552:	be e0       	ldi	r27, 0x0E	; 14
 554:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__umulhisi3>
 558:	2f ef       	ldi	r18, 0xFF	; 255
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 564:	c9 01       	movw	r24, r18
 566:	80 55       	subi	r24, 0x50	; 80
 568:	9b 4f       	sbci	r25, 0xFB	; 251
 56a:	0e 94 8c 00 	call	0x118	; 0x118 <updateServoPulse2>
                ADMUX = (ADMUX&0xF0)|2; canal_actual=2;
 56e:	ec e7       	ldi	r30, 0x7C	; 124
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	80 7f       	andi	r24, 0xF0	; 240
 576:	82 60       	ori	r24, 0x02	; 2
 578:	80 83       	st	Z, r24
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <canal_actual>
                break;
 580:	51 c0       	rjmp	.+162    	; 0x624 <__vector_21+0x152>
            case 2:
                updateServoPulse3((v*   15UL)/255 +   16);
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	a0 e0       	ldi	r26, 0x00	; 0
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	ac 01       	movw	r20, r24
 58a:	bd 01       	movw	r22, r26
 58c:	44 0f       	add	r20, r20
 58e:	55 1f       	adc	r21, r21
 590:	66 1f       	adc	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	84 0f       	add	r24, r20
 596:	95 1f       	adc	r25, r21
 598:	a6 1f       	adc	r26, r22
 59a:	b7 1f       	adc	r27, r23
 59c:	ac 01       	movw	r20, r24
 59e:	bd 01       	movw	r22, r26
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	66 1f       	adc	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	66 1f       	adc	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	8c 01       	movw	r16, r24
 5b2:	9d 01       	movw	r18, r26
 5b4:	04 0f       	add	r16, r20
 5b6:	15 1f       	adc	r17, r21
 5b8:	26 1f       	adc	r18, r22
 5ba:	37 1f       	adc	r19, r23
 5bc:	c9 01       	movw	r24, r18
 5be:	b8 01       	movw	r22, r16
 5c0:	2f ef       	ldi	r18, 0xFF	; 255
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 5cc:	c9 01       	movw	r24, r18
 5ce:	40 96       	adiw	r24, 0x10	; 16
 5d0:	0e 94 9e 00 	call	0x13c	; 0x13c <updateServoPulse3>
                ADMUX = (ADMUX&0xF0)|3; canal_actual=3;
 5d4:	ec e7       	ldi	r30, 0x7C	; 124
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	80 7f       	andi	r24, 0xF0	; 240
 5dc:	83 60       	ori	r24, 0x03	; 3
 5de:	80 83       	st	Z, r24
 5e0:	83 e0       	ldi	r24, 0x03	; 3
 5e2:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <canal_actual>
                break;
 5e6:	1e c0       	rjmp	.+60     	; 0x624 <__vector_21+0x152>
            default:
                updateServoPulse4((uint16_t)((v*0.106f)+10));
 5e8:	68 2f       	mov	r22, r24
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 c8 03 	call	0x790	; 0x790 <__floatsisf>
 5f4:	27 e8       	ldi	r18, 0x87	; 135
 5f6:	36 e1       	ldi	r19, 0x16	; 22
 5f8:	49 ed       	ldi	r20, 0xD9	; 217
 5fa:	5d e3       	ldi	r21, 0x3D	; 61
 5fc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__mulsf3>
 600:	20 e0       	ldi	r18, 0x00	; 0
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	40 e2       	ldi	r20, 0x20	; 32
 606:	51 e4       	ldi	r21, 0x41	; 65
 608:	0e 94 2b 03 	call	0x656	; 0x656 <__addsf3>
 60c:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
 610:	cb 01       	movw	r24, r22
 612:	0e 94 a1 00 	call	0x142	; 0x142 <updateServoPulse4>
                ADMUX = (ADMUX&0xF0)|0; canal_actual=0;
 616:	ec e7       	ldi	r30, 0x7C	; 124
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	80 7f       	andi	r24, 0xF0	; 240
 61e:	80 83       	st	Z, r24
 620:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <canal_actual>
                break;
        }
    }
    ADCSRA |= (1<<ADSC);  // siguiente conversión
 624:	ea e7       	ldi	r30, 0x7A	; 122
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	80 83       	st	Z, r24
}
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <__subsf3>:
 654:	50 58       	subi	r21, 0x80	; 128

00000656 <__addsf3>:
 656:	bb 27       	eor	r27, r27
 658:	aa 27       	eor	r26, r26
 65a:	0e 94 42 03 	call	0x684	; 0x684 <__addsf3x>
 65e:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_round>
 662:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscA>
 666:	38 f0       	brcs	.+14     	; 0x676 <__addsf3+0x20>
 668:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscB>
 66c:	20 f0       	brcs	.+8      	; 0x676 <__addsf3+0x20>
 66e:	39 f4       	brne	.+14     	; 0x67e <__addsf3+0x28>
 670:	9f 3f       	cpi	r25, 0xFF	; 255
 672:	19 f4       	brne	.+6      	; 0x67a <__addsf3+0x24>
 674:	26 f4       	brtc	.+8      	; 0x67e <__addsf3+0x28>
 676:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_nan>
 67a:	0e f4       	brtc	.+2      	; 0x67e <__addsf3+0x28>
 67c:	e0 95       	com	r30
 67e:	e7 fb       	bst	r30, 7
 680:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>

00000684 <__addsf3x>:
 684:	e9 2f       	mov	r30, r25
 686:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_split3>
 68a:	58 f3       	brcs	.-42     	; 0x662 <__addsf3+0xc>
 68c:	ba 17       	cp	r27, r26
 68e:	62 07       	cpc	r22, r18
 690:	73 07       	cpc	r23, r19
 692:	84 07       	cpc	r24, r20
 694:	95 07       	cpc	r25, r21
 696:	20 f0       	brcs	.+8      	; 0x6a0 <__addsf3x+0x1c>
 698:	79 f4       	brne	.+30     	; 0x6b8 <__addsf3x+0x34>
 69a:	a6 f5       	brtc	.+104    	; 0x704 <__addsf3x+0x80>
 69c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_zero>
 6a0:	0e f4       	brtc	.+2      	; 0x6a4 <__addsf3x+0x20>
 6a2:	e0 95       	com	r30
 6a4:	0b 2e       	mov	r0, r27
 6a6:	ba 2f       	mov	r27, r26
 6a8:	a0 2d       	mov	r26, r0
 6aa:	0b 01       	movw	r0, r22
 6ac:	b9 01       	movw	r22, r18
 6ae:	90 01       	movw	r18, r0
 6b0:	0c 01       	movw	r0, r24
 6b2:	ca 01       	movw	r24, r20
 6b4:	a0 01       	movw	r20, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	ff 27       	eor	r31, r31
 6ba:	59 1b       	sub	r21, r25
 6bc:	99 f0       	breq	.+38     	; 0x6e4 <__addsf3x+0x60>
 6be:	59 3f       	cpi	r21, 0xF9	; 249
 6c0:	50 f4       	brcc	.+20     	; 0x6d6 <__addsf3x+0x52>
 6c2:	50 3e       	cpi	r21, 0xE0	; 224
 6c4:	68 f1       	brcs	.+90     	; 0x720 <__addsf3x+0x9c>
 6c6:	1a 16       	cp	r1, r26
 6c8:	f0 40       	sbci	r31, 0x00	; 0
 6ca:	a2 2f       	mov	r26, r18
 6cc:	23 2f       	mov	r18, r19
 6ce:	34 2f       	mov	r19, r20
 6d0:	44 27       	eor	r20, r20
 6d2:	58 5f       	subi	r21, 0xF8	; 248
 6d4:	f3 cf       	rjmp	.-26     	; 0x6bc <__addsf3x+0x38>
 6d6:	46 95       	lsr	r20
 6d8:	37 95       	ror	r19
 6da:	27 95       	ror	r18
 6dc:	a7 95       	ror	r26
 6de:	f0 40       	sbci	r31, 0x00	; 0
 6e0:	53 95       	inc	r21
 6e2:	c9 f7       	brne	.-14     	; 0x6d6 <__addsf3x+0x52>
 6e4:	7e f4       	brtc	.+30     	; 0x704 <__addsf3x+0x80>
 6e6:	1f 16       	cp	r1, r31
 6e8:	ba 0b       	sbc	r27, r26
 6ea:	62 0b       	sbc	r22, r18
 6ec:	73 0b       	sbc	r23, r19
 6ee:	84 0b       	sbc	r24, r20
 6f0:	ba f0       	brmi	.+46     	; 0x720 <__addsf3x+0x9c>
 6f2:	91 50       	subi	r25, 0x01	; 1
 6f4:	a1 f0       	breq	.+40     	; 0x71e <__addsf3x+0x9a>
 6f6:	ff 0f       	add	r31, r31
 6f8:	bb 1f       	adc	r27, r27
 6fa:	66 1f       	adc	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	88 1f       	adc	r24, r24
 700:	c2 f7       	brpl	.-16     	; 0x6f2 <__addsf3x+0x6e>
 702:	0e c0       	rjmp	.+28     	; 0x720 <__addsf3x+0x9c>
 704:	ba 0f       	add	r27, r26
 706:	62 1f       	adc	r22, r18
 708:	73 1f       	adc	r23, r19
 70a:	84 1f       	adc	r24, r20
 70c:	48 f4       	brcc	.+18     	; 0x720 <__addsf3x+0x9c>
 70e:	87 95       	ror	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	b7 95       	ror	r27
 716:	f7 95       	ror	r31
 718:	9e 3f       	cpi	r25, 0xFE	; 254
 71a:	08 f0       	brcs	.+2      	; 0x71e <__addsf3x+0x9a>
 71c:	b0 cf       	rjmp	.-160    	; 0x67e <__addsf3+0x28>
 71e:	93 95       	inc	r25
 720:	88 0f       	add	r24, r24
 722:	08 f0       	brcs	.+2      	; 0x726 <__addsf3x+0xa2>
 724:	99 27       	eor	r25, r25
 726:	ee 0f       	add	r30, r30
 728:	97 95       	ror	r25
 72a:	87 95       	ror	r24
 72c:	08 95       	ret

0000072e <__fixunssfsi>:
 72e:	0e 94 33 04 	call	0x866	; 0x866 <__fp_splitA>
 732:	88 f0       	brcs	.+34     	; 0x756 <__fixunssfsi+0x28>
 734:	9f 57       	subi	r25, 0x7F	; 127
 736:	98 f0       	brcs	.+38     	; 0x75e <__fixunssfsi+0x30>
 738:	b9 2f       	mov	r27, r25
 73a:	99 27       	eor	r25, r25
 73c:	b7 51       	subi	r27, 0x17	; 23
 73e:	b0 f0       	brcs	.+44     	; 0x76c <__fixunssfsi+0x3e>
 740:	e1 f0       	breq	.+56     	; 0x77a <__fixunssfsi+0x4c>
 742:	66 0f       	add	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	1a f0       	brmi	.+6      	; 0x752 <__fixunssfsi+0x24>
 74c:	ba 95       	dec	r27
 74e:	c9 f7       	brne	.-14     	; 0x742 <__fixunssfsi+0x14>
 750:	14 c0       	rjmp	.+40     	; 0x77a <__fixunssfsi+0x4c>
 752:	b1 30       	cpi	r27, 0x01	; 1
 754:	91 f0       	breq	.+36     	; 0x77a <__fixunssfsi+0x4c>
 756:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_zero>
 75a:	b1 e0       	ldi	r27, 0x01	; 1
 75c:	08 95       	ret
 75e:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_zero>
 762:	67 2f       	mov	r22, r23
 764:	78 2f       	mov	r23, r24
 766:	88 27       	eor	r24, r24
 768:	b8 5f       	subi	r27, 0xF8	; 248
 76a:	39 f0       	breq	.+14     	; 0x77a <__fixunssfsi+0x4c>
 76c:	b9 3f       	cpi	r27, 0xF9	; 249
 76e:	cc f3       	brlt	.-14     	; 0x762 <__fixunssfsi+0x34>
 770:	86 95       	lsr	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b3 95       	inc	r27
 778:	d9 f7       	brne	.-10     	; 0x770 <__fixunssfsi+0x42>
 77a:	3e f4       	brtc	.+14     	; 0x78a <__fixunssfsi+0x5c>
 77c:	90 95       	com	r25
 77e:	80 95       	com	r24
 780:	70 95       	com	r23
 782:	61 95       	neg	r22
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	08 95       	ret

0000078c <__floatunsisf>:
 78c:	e8 94       	clt
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <__floatsisf+0x12>

00000790 <__floatsisf>:
 790:	97 fb       	bst	r25, 7
 792:	3e f4       	brtc	.+14     	; 0x7a2 <__floatsisf+0x12>
 794:	90 95       	com	r25
 796:	80 95       	com	r24
 798:	70 95       	com	r23
 79a:	61 95       	neg	r22
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	99 23       	and	r25, r25
 7a4:	a9 f0       	breq	.+42     	; 0x7d0 <__floatsisf+0x40>
 7a6:	f9 2f       	mov	r31, r25
 7a8:	96 e9       	ldi	r25, 0x96	; 150
 7aa:	bb 27       	eor	r27, r27
 7ac:	93 95       	inc	r25
 7ae:	f6 95       	lsr	r31
 7b0:	87 95       	ror	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f1 11       	cpse	r31, r1
 7ba:	f8 cf       	rjmp	.-16     	; 0x7ac <__floatsisf+0x1c>
 7bc:	fa f4       	brpl	.+62     	; 0x7fc <__floatsisf+0x6c>
 7be:	bb 0f       	add	r27, r27
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <__floatsisf+0x36>
 7c2:	60 ff       	sbrs	r22, 0
 7c4:	1b c0       	rjmp	.+54     	; 0x7fc <__floatsisf+0x6c>
 7c6:	6f 5f       	subi	r22, 0xFF	; 255
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	8f 4f       	sbci	r24, 0xFF	; 255
 7cc:	9f 4f       	sbci	r25, 0xFF	; 255
 7ce:	16 c0       	rjmp	.+44     	; 0x7fc <__floatsisf+0x6c>
 7d0:	88 23       	and	r24, r24
 7d2:	11 f0       	breq	.+4      	; 0x7d8 <__floatsisf+0x48>
 7d4:	96 e9       	ldi	r25, 0x96	; 150
 7d6:	11 c0       	rjmp	.+34     	; 0x7fa <__floatsisf+0x6a>
 7d8:	77 23       	and	r23, r23
 7da:	21 f0       	breq	.+8      	; 0x7e4 <__floatsisf+0x54>
 7dc:	9e e8       	ldi	r25, 0x8E	; 142
 7de:	87 2f       	mov	r24, r23
 7e0:	76 2f       	mov	r23, r22
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <__floatsisf+0x5e>
 7e4:	66 23       	and	r22, r22
 7e6:	71 f0       	breq	.+28     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e8:	96 e8       	ldi	r25, 0x86	; 134
 7ea:	86 2f       	mov	r24, r22
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	2a f0       	brmi	.+10     	; 0x7fc <__floatsisf+0x6c>
 7f2:	9a 95       	dec	r25
 7f4:	66 0f       	add	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	88 1f       	adc	r24, r24
 7fa:	da f7       	brpl	.-10     	; 0x7f2 <__floatsisf+0x62>
 7fc:	88 0f       	add	r24, r24
 7fe:	96 95       	lsr	r25
 800:	87 95       	ror	r24
 802:	97 f9       	bld	r25, 7
 804:	08 95       	ret

00000806 <__fp_inf>:
 806:	97 f9       	bld	r25, 7
 808:	9f 67       	ori	r25, 0x7F	; 127
 80a:	80 e8       	ldi	r24, 0x80	; 128
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	08 95       	ret

00000812 <__fp_nan>:
 812:	9f ef       	ldi	r25, 0xFF	; 255
 814:	80 ec       	ldi	r24, 0xC0	; 192
 816:	08 95       	ret

00000818 <__fp_pscA>:
 818:	00 24       	eor	r0, r0
 81a:	0a 94       	dec	r0
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	18 06       	cpc	r1, r24
 822:	09 06       	cpc	r0, r25
 824:	08 95       	ret

00000826 <__fp_pscB>:
 826:	00 24       	eor	r0, r0
 828:	0a 94       	dec	r0
 82a:	12 16       	cp	r1, r18
 82c:	13 06       	cpc	r1, r19
 82e:	14 06       	cpc	r1, r20
 830:	05 06       	cpc	r0, r21
 832:	08 95       	ret

00000834 <__fp_round>:
 834:	09 2e       	mov	r0, r25
 836:	03 94       	inc	r0
 838:	00 0c       	add	r0, r0
 83a:	11 f4       	brne	.+4      	; 0x840 <__fp_round+0xc>
 83c:	88 23       	and	r24, r24
 83e:	52 f0       	brmi	.+20     	; 0x854 <__fp_round+0x20>
 840:	bb 0f       	add	r27, r27
 842:	40 f4       	brcc	.+16     	; 0x854 <__fp_round+0x20>
 844:	bf 2b       	or	r27, r31
 846:	11 f4       	brne	.+4      	; 0x84c <__fp_round+0x18>
 848:	60 ff       	sbrs	r22, 0
 84a:	04 c0       	rjmp	.+8      	; 0x854 <__fp_round+0x20>
 84c:	6f 5f       	subi	r22, 0xFF	; 255
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	08 95       	ret

00000856 <__fp_split3>:
 856:	57 fd       	sbrc	r21, 7
 858:	90 58       	subi	r25, 0x80	; 128
 85a:	44 0f       	add	r20, r20
 85c:	55 1f       	adc	r21, r21
 85e:	59 f0       	breq	.+22     	; 0x876 <__fp_splitA+0x10>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	71 f0       	breq	.+28     	; 0x880 <__fp_splitA+0x1a>
 864:	47 95       	ror	r20

00000866 <__fp_splitA>:
 866:	88 0f       	add	r24, r24
 868:	97 fb       	bst	r25, 7
 86a:	99 1f       	adc	r25, r25
 86c:	61 f0       	breq	.+24     	; 0x886 <__fp_splitA+0x20>
 86e:	9f 3f       	cpi	r25, 0xFF	; 255
 870:	79 f0       	breq	.+30     	; 0x890 <__fp_splitA+0x2a>
 872:	87 95       	ror	r24
 874:	08 95       	ret
 876:	12 16       	cp	r1, r18
 878:	13 06       	cpc	r1, r19
 87a:	14 06       	cpc	r1, r20
 87c:	55 1f       	adc	r21, r21
 87e:	f2 cf       	rjmp	.-28     	; 0x864 <__fp_split3+0xe>
 880:	46 95       	lsr	r20
 882:	f1 df       	rcall	.-30     	; 0x866 <__fp_splitA>
 884:	08 c0       	rjmp	.+16     	; 0x896 <__fp_splitA+0x30>
 886:	16 16       	cp	r1, r22
 888:	17 06       	cpc	r1, r23
 88a:	18 06       	cpc	r1, r24
 88c:	99 1f       	adc	r25, r25
 88e:	f1 cf       	rjmp	.-30     	; 0x872 <__fp_splitA+0xc>
 890:	86 95       	lsr	r24
 892:	71 05       	cpc	r23, r1
 894:	61 05       	cpc	r22, r1
 896:	08 94       	sec
 898:	08 95       	ret

0000089a <__fp_zero>:
 89a:	e8 94       	clt

0000089c <__fp_szero>:
 89c:	bb 27       	eor	r27, r27
 89e:	66 27       	eor	r22, r22
 8a0:	77 27       	eor	r23, r23
 8a2:	cb 01       	movw	r24, r22
 8a4:	97 f9       	bld	r25, 7
 8a6:	08 95       	ret

000008a8 <__mulsf3>:
 8a8:	0e 94 67 04 	call	0x8ce	; 0x8ce <__mulsf3x>
 8ac:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_round>
 8b0:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscA>
 8b4:	38 f0       	brcs	.+14     	; 0x8c4 <__mulsf3+0x1c>
 8b6:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscB>
 8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__mulsf3+0x1c>
 8bc:	95 23       	and	r25, r21
 8be:	11 f0       	breq	.+4      	; 0x8c4 <__mulsf3+0x1c>
 8c0:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 8c4:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_nan>
 8c8:	11 24       	eor	r1, r1
 8ca:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_szero>

000008ce <__mulsf3x>:
 8ce:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_split3>
 8d2:	70 f3       	brcs	.-36     	; 0x8b0 <__mulsf3+0x8>

000008d4 <__mulsf3_pse>:
 8d4:	95 9f       	mul	r25, r21
 8d6:	c1 f3       	breq	.-16     	; 0x8c8 <__mulsf3+0x20>
 8d8:	95 0f       	add	r25, r21
 8da:	50 e0       	ldi	r21, 0x00	; 0
 8dc:	55 1f       	adc	r21, r21
 8de:	62 9f       	mul	r22, r18
 8e0:	f0 01       	movw	r30, r0
 8e2:	72 9f       	mul	r23, r18
 8e4:	bb 27       	eor	r27, r27
 8e6:	f0 0d       	add	r31, r0
 8e8:	b1 1d       	adc	r27, r1
 8ea:	63 9f       	mul	r22, r19
 8ec:	aa 27       	eor	r26, r26
 8ee:	f0 0d       	add	r31, r0
 8f0:	b1 1d       	adc	r27, r1
 8f2:	aa 1f       	adc	r26, r26
 8f4:	64 9f       	mul	r22, r20
 8f6:	66 27       	eor	r22, r22
 8f8:	b0 0d       	add	r27, r0
 8fa:	a1 1d       	adc	r26, r1
 8fc:	66 1f       	adc	r22, r22
 8fe:	82 9f       	mul	r24, r18
 900:	22 27       	eor	r18, r18
 902:	b0 0d       	add	r27, r0
 904:	a1 1d       	adc	r26, r1
 906:	62 1f       	adc	r22, r18
 908:	73 9f       	mul	r23, r19
 90a:	b0 0d       	add	r27, r0
 90c:	a1 1d       	adc	r26, r1
 90e:	62 1f       	adc	r22, r18
 910:	83 9f       	mul	r24, r19
 912:	a0 0d       	add	r26, r0
 914:	61 1d       	adc	r22, r1
 916:	22 1f       	adc	r18, r18
 918:	74 9f       	mul	r23, r20
 91a:	33 27       	eor	r19, r19
 91c:	a0 0d       	add	r26, r0
 91e:	61 1d       	adc	r22, r1
 920:	23 1f       	adc	r18, r19
 922:	84 9f       	mul	r24, r20
 924:	60 0d       	add	r22, r0
 926:	21 1d       	adc	r18, r1
 928:	82 2f       	mov	r24, r18
 92a:	76 2f       	mov	r23, r22
 92c:	6a 2f       	mov	r22, r26
 92e:	11 24       	eor	r1, r1
 930:	9f 57       	subi	r25, 0x7F	; 127
 932:	50 40       	sbci	r21, 0x00	; 0
 934:	9a f0       	brmi	.+38     	; 0x95c <__stack+0x5d>
 936:	f1 f0       	breq	.+60     	; 0x974 <__stack+0x75>
 938:	88 23       	and	r24, r24
 93a:	4a f0       	brmi	.+18     	; 0x94e <__stack+0x4f>
 93c:	ee 0f       	add	r30, r30
 93e:	ff 1f       	adc	r31, r31
 940:	bb 1f       	adc	r27, r27
 942:	66 1f       	adc	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	91 50       	subi	r25, 0x01	; 1
 94a:	50 40       	sbci	r21, 0x00	; 0
 94c:	a9 f7       	brne	.-22     	; 0x938 <__stack+0x39>
 94e:	9e 3f       	cpi	r25, 0xFE	; 254
 950:	51 05       	cpc	r21, r1
 952:	80 f0       	brcs	.+32     	; 0x974 <__stack+0x75>
 954:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 958:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_szero>
 95c:	5f 3f       	cpi	r21, 0xFF	; 255
 95e:	e4 f3       	brlt	.-8      	; 0x958 <__stack+0x59>
 960:	98 3e       	cpi	r25, 0xE8	; 232
 962:	d4 f3       	brlt	.-12     	; 0x958 <__stack+0x59>
 964:	86 95       	lsr	r24
 966:	77 95       	ror	r23
 968:	67 95       	ror	r22
 96a:	b7 95       	ror	r27
 96c:	f7 95       	ror	r31
 96e:	e7 95       	ror	r30
 970:	9f 5f       	subi	r25, 0xFF	; 255
 972:	c1 f7       	brne	.-16     	; 0x964 <__stack+0x65>
 974:	fe 2b       	or	r31, r30
 976:	88 0f       	add	r24, r24
 978:	91 1d       	adc	r25, r1
 97a:	96 95       	lsr	r25
 97c:	87 95       	ror	r24
 97e:	97 f9       	bld	r25, 7
 980:	08 95       	ret

00000982 <__udivmodsi4>:
 982:	a1 e2       	ldi	r26, 0x21	; 33
 984:	1a 2e       	mov	r1, r26
 986:	aa 1b       	sub	r26, r26
 988:	bb 1b       	sub	r27, r27
 98a:	fd 01       	movw	r30, r26
 98c:	0d c0       	rjmp	.+26     	; 0x9a8 <__udivmodsi4_ep>

0000098e <__udivmodsi4_loop>:
 98e:	aa 1f       	adc	r26, r26
 990:	bb 1f       	adc	r27, r27
 992:	ee 1f       	adc	r30, r30
 994:	ff 1f       	adc	r31, r31
 996:	a2 17       	cp	r26, r18
 998:	b3 07       	cpc	r27, r19
 99a:	e4 07       	cpc	r30, r20
 99c:	f5 07       	cpc	r31, r21
 99e:	20 f0       	brcs	.+8      	; 0x9a8 <__udivmodsi4_ep>
 9a0:	a2 1b       	sub	r26, r18
 9a2:	b3 0b       	sbc	r27, r19
 9a4:	e4 0b       	sbc	r30, r20
 9a6:	f5 0b       	sbc	r31, r21

000009a8 <__udivmodsi4_ep>:
 9a8:	66 1f       	adc	r22, r22
 9aa:	77 1f       	adc	r23, r23
 9ac:	88 1f       	adc	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	1a 94       	dec	r1
 9b2:	69 f7       	brne	.-38     	; 0x98e <__udivmodsi4_loop>
 9b4:	60 95       	com	r22
 9b6:	70 95       	com	r23
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	9b 01       	movw	r18, r22
 9be:	ac 01       	movw	r20, r24
 9c0:	bd 01       	movw	r22, r26
 9c2:	cf 01       	movw	r24, r30
 9c4:	08 95       	ret

000009c6 <__tablejump2__>:
 9c6:	ee 0f       	add	r30, r30
 9c8:	ff 1f       	adc	r31, r31
 9ca:	05 90       	lpm	r0, Z+
 9cc:	f4 91       	lpm	r31, Z
 9ce:	e0 2d       	mov	r30, r0
 9d0:	09 94       	ijmp

000009d2 <__umulhisi3>:
 9d2:	a2 9f       	mul	r26, r18
 9d4:	b0 01       	movw	r22, r0
 9d6:	b3 9f       	mul	r27, r19
 9d8:	c0 01       	movw	r24, r0
 9da:	a3 9f       	mul	r26, r19
 9dc:	70 0d       	add	r23, r0
 9de:	81 1d       	adc	r24, r1
 9e0:	11 24       	eor	r1, r1
 9e2:	91 1d       	adc	r25, r1
 9e4:	b2 9f       	mul	r27, r18
 9e6:	70 0d       	add	r23, r0
 9e8:	81 1d       	adc	r24, r1
 9ea:	11 24       	eor	r1, r1
 9ec:	91 1d       	adc	r25, r1
 9ee:	08 95       	ret

000009f0 <atoi>:
 9f0:	fc 01       	movw	r30, r24
 9f2:	88 27       	eor	r24, r24
 9f4:	99 27       	eor	r25, r25
 9f6:	e8 94       	clt
 9f8:	21 91       	ld	r18, Z+
 9fa:	20 32       	cpi	r18, 0x20	; 32
 9fc:	e9 f3       	breq	.-6      	; 0x9f8 <atoi+0x8>
 9fe:	29 30       	cpi	r18, 0x09	; 9
 a00:	10 f0       	brcs	.+4      	; 0xa06 <atoi+0x16>
 a02:	2e 30       	cpi	r18, 0x0E	; 14
 a04:	c8 f3       	brcs	.-14     	; 0x9f8 <atoi+0x8>
 a06:	2b 32       	cpi	r18, 0x2B	; 43
 a08:	41 f0       	breq	.+16     	; 0xa1a <atoi+0x2a>
 a0a:	2d 32       	cpi	r18, 0x2D	; 45
 a0c:	39 f4       	brne	.+14     	; 0xa1c <atoi+0x2c>
 a0e:	68 94       	set
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <atoi+0x2a>
 a12:	0e 94 16 05 	call	0xa2c	; 0xa2c <__mulhi_const_10>
 a16:	82 0f       	add	r24, r18
 a18:	91 1d       	adc	r25, r1
 a1a:	21 91       	ld	r18, Z+
 a1c:	20 53       	subi	r18, 0x30	; 48
 a1e:	2a 30       	cpi	r18, 0x0A	; 10
 a20:	c0 f3       	brcs	.-16     	; 0xa12 <atoi+0x22>
 a22:	1e f4       	brtc	.+6      	; 0xa2a <atoi+0x3a>
 a24:	90 95       	com	r25
 a26:	81 95       	neg	r24
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	08 95       	ret

00000a2c <__mulhi_const_10>:
 a2c:	7a e0       	ldi	r23, 0x0A	; 10
 a2e:	97 9f       	mul	r25, r23
 a30:	90 2d       	mov	r25, r0
 a32:	87 9f       	mul	r24, r23
 a34:	80 2d       	mov	r24, r0
 a36:	91 0d       	add	r25, r1
 a38:	11 24       	eor	r1, r1
 a3a:	08 95       	ret

00000a3c <_exit>:
 a3c:	f8 94       	cli

00000a3e <__stop_program>:
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <__stop_program>


prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000002c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000859  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000710  00000000  00000000  00000bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bb  00000000  00000000  000012e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000171  00000000  00000000  00001b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9e:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	sei();
}

void initADC()
{
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); //Referencia = AVCC
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX1);
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	 
	ADCSRA = 0;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | ( 1 << ADEN) | (1 << ADIE);
  c4:	80 81       	ld	r24, Z
  c6:	8b 68       	ori	r24, 0x8B	; 139
  c8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC); 
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <setup>:
}
/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
  d2:	f8 94       	cli
	CLKPR = (1 << CLKPCE);
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	80 83       	st	Z, r24
	DDRD    = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	8a b9       	out	0x0a, r24	; 10
	PORTD   = 0x00;
  e4:	1b b8       	out	0x0b, r1	; 11
	DDRB    = 0xFF;
  e6:	84 b9       	out	0x04, r24	; 4
	PORTB   = 0x00;
  e8:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00;
  ea:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF; 
  ec:	88 b9       	out	0x08, r24	; 8
	UCSR0B = 0;
  ee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PCICR |= (1 << PCIE1);
  f2:	e8 e6       	ldi	r30, 0x68	; 104
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);
  fc:	ec e6       	ldi	r30, 0x6C	; 108
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	83 60       	ori	r24, 0x03	; 3
 104:	80 83       	st	Z, r24
	initADC();
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	sei();
 10a:	78 94       	sei
 10c:	08 95       	ret

0000010e <main>:

/****************************************/
// Main Function
int main(void)
{
	setup(); //
 10e:	0e 94 69 00 	call	0xd2	; 0xd2 <setup>
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x4>

00000114 <__vector_4>:
	
}
/****************************************/
// Interrupt routines
ISR(PCINT1_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
	if(!(PINC & (1 << PINC0)))
 120:	30 99       	sbic	0x06, 0	; 6
 122:	05 c0       	rjmp	.+10     	; 0x12e <__vector_4+0x1a>
	{
		contador++;	
 124:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
	
	if(!(PINC & (1 << PINC1)))
 12e:	31 99       	sbic	0x06, 1	; 6
 130:	05 c0       	rjmp	.+10     	; 0x13c <__vector_4+0x28>
	{
		contador--;
 132:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 136:	81 50       	subi	r24, 0x01	; 1
 138:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
	
	
}
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_21>:


ISR(ADC_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
 
	contador_vol = ADCH;
 15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contador_vol>
	if (contador_vol < 5) contador_vol = 0;
 162:	85 30       	cpi	r24, 0x05	; 5
 164:	10 f4       	brcc	.+4      	; 0x16a <__vector_21+0x22>
 166:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <contador_vol>
	msb = (contador_vol >> 4) & 0x0F;
 16a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador_vol>
 16e:	e8 2f       	mov	r30, r24
 170:	e2 95       	swap	r30
 172:	ef 70       	andi	r30, 0x0F	; 15
 174:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <msb>
	lsb = contador_vol & 0x0F;
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <lsb>

	// Mostrar dígito más significativo
	PORTD = tablaDIS[msb];
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
 186:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1 << PORTB1); // Activa display 2 (decenas hex)
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	93 e0       	ldi	r25, 0x03	; 3
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <__vector_21+0x4a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <__vector_21+0x50>
 198:	00 00       	nop
	_delay_us(20);
	PORTB &= ~(1 << PORTB1); // Apaga display 2
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	85 b9       	out	0x05, r24	; 5

	// Mostrar dígito menos significativo
	PORTD = tablaDIS[lsb];
 1a0:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <lsb>
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
 1ac:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1 << PORTB0); // Activa display 1 (unidades hex)
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	93 e0       	ldi	r25, 0x03	; 3
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <__vector_21+0x70>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <__vector_21+0x76>
 1be:	00 00       	nop
	_delay_us(20);
	PORTB &= ~(1 << PORTB0); // Apaga display 1
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	85 b9       	out	0x05, r24	; 5
	
	PORTD = contador;
 1c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1ca:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1 << PORTB2); // Activa display 1 (unidades hex)
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <__vector_21+0x8e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <__vector_21+0x94>
 1dc:	00 00       	nop
	_delay_us(20);
	PORTB &= ~(1 << PORTB2); // Apaga display 1
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	85 b9       	out	0x05, r24	; 5
	
	if(contador_vol >= contador){
 1e4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <contador_vol>
 1e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1ec:	98 17       	cp	r25, r24
 1ee:	20 f0       	brcs	.+8      	; 0x1f8 <__vector_21+0xb0>
		PORTB |= (1 << PORTB3); // Activa display 1 (unidades hex)	
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <__vector_21+0xba>
	}
	else if (contador_vol < contador){
 1f8:	98 17       	cp	r25, r24
 1fa:	18 f4       	brcc	.+6      	; 0x202 <__vector_21+0xba>
		PORTB &= ~(1 << PORTB3); // Apaga display 1
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	85 b9       	out	0x05, r24	; 5
	}
	ADCSRA |= (1 << ADSC); // Inicia nueva conversión
 202:	ea e7       	ldi	r30, 0x7A	; 122
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	80 83       	st	Z, r24
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
